-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | yaml loving docker-compose orchestration
--   
--   This is a simple command line tool focused around a dockmaster.yml
--   file for your project, which allows some conveniences such as
--   specifying docker-machine targets and allowing arbitrary hooks around
--   commands that are forwarded to docker-compose.
@package dockmaster
@version 0.1.0.0


module Options.Utils

-- | <tt>Text</tt> option
textOption :: Mod OptionFields String -> Parser Text

-- | <tt>Text</tt> argument type
text :: ReadM Text

-- | <a>FilePath</a> option
filePathOption :: Mod OptionFields String -> Parser FilePath


module Dockmaster

-- | Runs <tt>docker-compose</tt> commands against resolved composition
--   locations See usage docs for more info. Tries to find a
--   <tt>dockmaster.yml</tt> file based on the initial path argument
dockmaster :: FilePath -> Bool -> Text -> [Text] -> Sh ()

-- | Dockmaster configuration (specified by dockmaster.yml)
data Dockmaster
Dockmaster :: ComposeConfig -> EnvConfig -> [Target] -> HashMap Text CommandConfig -> Dockmaster
[dmCompose] :: Dockmaster -> ComposeConfig
[dmEnv] :: Dockmaster -> EnvConfig
[dmTargets] :: Dockmaster -> [Target]
[dmCommands] :: Dockmaster -> HashMap Text CommandConfig

-- | Configuration for <tt>docker-compose.yml</tt> arguments.
data ComposeConfig
ComposeConfig :: [ComposeFile] -> [Text] -> ComposeConfig
[dcFiles] :: ComposeConfig -> [ComposeFile]
[dcFlags] :: ComposeConfig -> [Text]

-- | Configuration for docker-compose compose file construction.
data ComposeFile
ComposeFile :: FilePath -> Bool -> [FilePath] -> ComposeFile
[cfPath] :: ComposeFile -> FilePath
[cfTemplate] :: ComposeFile -> Bool
[cfConfig] :: ComposeFile -> [FilePath]

-- | Global environment variables for dockmaster execution.
data EnvConfig
EnvConfig :: [FilePath] -> HashMap Text Text -> EnvConfig
[ecFiles] :: EnvConfig -> [FilePath]
[ecVars] :: EnvConfig -> HashMap Text Text

-- | Targets are used to identify where compositions are run.
data Target
Target :: Text -> Text -> Maybe Text -> Target
[targetName] :: Target -> Text
[targetType] :: Target -> Text
[targetMachine] :: Target -> Maybe Text

-- | Hooks can be specified by filename or direct shell command.
data Hook
File :: Text -> Hook
Shell :: Text -> Hook

-- | Configuration for each command.
data CommandConfig
CommandConfig :: Bool -> [Hook] -> [Hook] -> CommandConfig
[ccRunCompose] :: CommandConfig -> Bool
[ccPreHooks] :: CommandConfig -> [Hook]
[ccPostHooks] :: CommandConfig -> [Hook]

-- | <a>FromJSON</a> instance for <a>ComposeFile</a>

-- | Small helper method to parse dockmaster<i>compose</i>files/type.
isTemplate :: Maybe String -> Bool

-- | <a>FromJSON</a> instance for <a>ComposeConfig</a>

-- | <a>Monoid</a> instance for <a>ComposeConfig</a>

-- | <a>FromJSON</a> instance for <a>EnvConfig</a>

-- | <a>Monoid</a> instance for <a>EnvConfig</a>

-- | <a>FromJSON</a> instance for <a>Target</a>

-- | <a>FromJSON</a> instance for <a>Hook</a>

-- | <a>FromJSON</a> instance for <a>CommandConfig</a>

-- | <a>FromJSON</a> instance for <a>Dockmaster</a>

-- | Parse <tt>$CWD/dockmaster.yml</tt>
--   
--   Note this assumes we are already in the correct dockmaster workdir.
dockmasterYml :: Sh (Either Text Dockmaster)

-- | Parse dockmaster yml file
parseYml :: FilePath -> Sh (Either Text Dockmaster)

-- | Sets environment variables defined by dockmaster configuration
prepareEnv :: Dockmaster -> Sh ()

-- | Takes machine name and <a>Sh</a> action, and wraps <a>Sh</a> action in
--   scope of <tt>docker-machine</tt> env
dockermachine :: Text -> Sh a -> Sh a

-- | Executes specific dc command pre/post hooks around action argument
--   (action arg is typically docker-compose command).
hookWrap :: Text -> Sh () -> Sh ()

-- | Same thing as <a>hookWrap</a> but accepts <a>Dockmaster</a> config to
--   execute against.
hookWrap' :: Dockmaster -> Text -> Sh () -> Sh ()

-- | Execute hook
execHook :: Hook -> Sh ()

-- | Runs <tt>docker-compose</tt> but uses <a>Dockmaster</a> configuration
--   to possibly
--   
--   <ol>
--   <li>Provide multiple templated docker-compose.yml files</li>
--   <li>Pass global <tt>docker-compose</tt> flags on every call</li>
--   </ol>
dockercompose :: Dockmaster -> [Text] -> Sh ()

-- | Dockmaster configuration
data Config
Config :: [FilePath] -> Config
[dmcPaths] :: Config -> [FilePath]

-- | Custom instance to parse strings directly into FilePath TODO ensure
--   this isn't bad. FFP warned me against "orphan instances"...

-- | Instance to parse dockmaster configuration file

-- | Dockmaster configuration runtime errors
data DmcError
WorkDirNotFound :: DmcError
DecodingError :: Text -> DmcError

-- | Get global dockmaster config
--   
--   If <tt>config.yml</tt> fails to parse, returns a <tt>Left error</tt>.
--   If <tt>config.yml</tt> is not found, returns <tt>Right baseConfig</tt>
--   (default configuration).
config :: Sh (Either DmcError Config)

-- | Get base config options
baseConfig :: Config

-- | Resolve the appropriate dockmaster workdir.
--   
--   For example, if <tt>$CWD/dockmaster.yml</tt> exists, then
--   
--   <pre>
--   &gt;&gt;&gt; getWorkDir "."
--   Right "."
--   </pre>
--   
--   If <tt>$CWD/dockmaster.yml</tt> does <i>not</i> exist, then
--   
--   <pre>
--   &gt;&gt;&gt; getWorkDir "."
--   Left "dockmaster.yml file not found"
--   </pre>
--   
--   This function will also try to resolve relative paths against the
--   <a>dmcPaths</a> composition listing directories, if any are specified
--   by global config. For example, if:
--   
--   <ol>
--   <li><tt>$HOME/git</tt> is a <tt>PATH</tt> specified in global
--   <tt>config.yml</tt></li>
--   <li><tt>$HOME/git/deploybot/dockmaster.yml</tt> exists</li>
--   <li><tt>$CWD/deploybot/dockmaster.yml</tt> does <i>not</i> exist,
--   then</li>
--   </ol>
--   
--   <pre>
--   &gt;&gt;&gt; getWorkDir "deploybot"
--   Right "$HOME/git/deploybot"
--   </pre>
getWorkDir :: FilePath -> Sh (Either DmcError FilePath)

-- | Same thing as <a>getWorkDir</a> but uses a <a>Config</a> argument
--   instead of resolving one.
getWorkDir' :: Config -> FilePath -> Sh (Either DmcError FilePath)
